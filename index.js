//const Web3 = require('web3');
//const abi = JSON.parse(require("./VerySimpleEasyContract.json"));
//import Web3 from 'web3';


//const rpcURL = "http://127.0.0.1:8545";
//const web3 = new Web3(rpcURL);

const abi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "getSecret",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_message",
				"type": "string"
			}
		],
		"name": "setSecret",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];

const bytecode = '0x' + "608060405234801561001057600080fd5b506040518060400160405280600781526020017f556e6b6e6f776e000000000000000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b50610166565b82805461006e90610105565b90600052602060002090601f01602090048101928261009057600085556100d7565b82601f106100a957805160ff19168380011785556100d7565b828001600101855582156100d7579182015b828111156100d65782518255916020019190600101906100bb565b5b5090506100e491906100e8565b5090565b5b808211156101015760008160009055506001016100e9565b5090565b6000600282049050600182168061011d57607f821691505b6020821081141561013157610130610137565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6104a8806101756000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635b9fdc301461003b5780637ed6c92614610059575b600080fd5b610043610075565b60405161005091906102b6565b60405180910390f35b610073600480360381019061006e9190610234565b610107565b005b6060600080546100849061038c565b80601f01602080910402602001604051908101604052809291908181526020018280546100b09061038c565b80156100fd5780601f106100d2576101008083540402835291602001916100fd565b820191906000526020600020905b8154815290600101906020018083116100e057829003601f168201915b5050505050905090565b806000908051906020019061011d929190610121565b5050565b82805461012d9061038c565b90600052602060002090601f01602090048101928261014f5760008555610196565b82601f1061016857805160ff1916838001178555610196565b82800160010185558215610196579182015b8281111561019557825182559160200191906001019061017a565b5b5090506101a391906101a7565b5090565b5b808211156101c05760008160009055506001016101a8565b5090565b60006101d76101d2846102fd565b6102d8565b9050828152602081018484840111156101f3576101f2610452565b5b6101fe84828561034a565b509392505050565b600082601f83011261021b5761021a61044d565b5b813561022b8482602086016101c4565b91505092915050565b60006020828403121561024a5761024961045c565b5b600082013567ffffffffffffffff81111561026857610267610457565b5b61027484828501610206565b91505092915050565b60006102888261032e565b6102928185610339565b93506102a2818560208601610359565b6102ab81610461565b840191505092915050565b600060208201905081810360008301526102d0818461027d565b905092915050565b60006102e26102f3565b90506102ee82826103be565b919050565b6000604051905090565b600067ffffffffffffffff8211156103185761031761041e565b5b61032182610461565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b82818337600083830152505050565b60005b8381101561037757808201518184015260208101905061035c565b83811115610386576000848401525b50505050565b600060028204905060018216806103a457607f821691505b602082108114156103b8576103b76103ef565b5b50919050565b6103c782610461565b810181811067ffffffffffffffff821117156103e6576103e561041e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f830116905091905056fea26469706673582212202da67ec0939f044539ed0e0a3d5f4bf612edf2b0b08f1e8675f1ac94de5c78f764736f6c63430008070033";


let account;
let web3;

function main(){
	connect().then(() =>
		init().then(() =>
			deploy()));
}

async function connect(){
	if (typeof window.ethereum !== 'undefined') {
		console.log('MetaMask is installed!');
		await window.ethereum.request({method: "eth_requestAccounts"});
		web3 = new Web3(window.ethereum);
	}
	else{
		console.log("Pleas install MetaMask");
	}
}


async function init(){
    const accounts = await web3.eth.getAccounts();
    console.log(accounts);


    for (account of accounts){
        console.log(account);
        balance = await web3.eth.getBalance(account);
        console.log(`balance = ${web3.utils.fromWei(balance, "ether")} eth`);
    }

    account = accounts[0];

	const element = `<p>${account.slice(0, 5)}...${account.slice(-5)}: ${balance}</p>`;
	document.getElementById("account_info").innerHTML = element;
}

async function deploy(){

    console.log(account);
    const contract = await new web3.eth.Contract(abi)
		.deploy({data: bytecode, arguments: []})
		.send({from: account, gas: "1000000"});
	console.log(contract);

	let element = `<p>${account.slice(0, 5)}...${account.slice(-5)}: Contract Deployed!</p>`;
	document.getElementById("contract").innerHTML = element;
	alert("The Very Important Contract Deployed");

	const initMessage = await contract.methods.getSecret().call({from: account});
	console.log(initMessage);

	element += `<p>${account.slice(0, 5)}...${account.slice(-5)}: NOOOO YOU REVEALED THE MESSAGE!</p>`;
	document.getElementById("contract").innerHTML = element;
	alert(`Message : ${initMessage}`);


	const newMessage = "Noooooo our secret secret message get revealed";
	const resp = await contract.methods.setSecret(newMessage).send({from: account, gas: "100000"});
	console.log(resp);

	element += `<p>${account.slice(0, 5)}...${account.slice(-5)}: New Message Deplyed!</p>`;
	document.getElementById("contract").innerHTML = element;
	alert(`Message Updated: ${newMessage}`);


	const updatedMessage = await contract.methods.getSecret().call({from: account});
	console.log(updatedMessage);

	element += `<p>${account.slice(0, 5)}...${account.slice(-5)}: New Secret LeakedðŸ˜­!</p>`;
	document.getElementById("contract").innerHTML = element;
	alert(`Message: ${updatedMessage}`);

}

main();






